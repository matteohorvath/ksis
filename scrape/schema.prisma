// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-py" // Changed to Python client generator
  output   = "./generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Overall competition details from files like results/competition_marks_XXXX.json
model Competition {
  id                      Int       @id // Use the external ID from the filename
  title                   String
  date                    DateTime? // Or String if format varies
  location                String?
  organizer               String?
  organizerRepresentative String?
  type                    String?
  participantCount        Int?
  commissioner            String?
  supervisor              String?
  announcer               String?
  counters                String // Changed from String[] to String to fix P1012 error

  judges        JudgeAssignment[]
  participants  ParticipantResult[] // Overall results for participants
  categoryMarks CompetitionMarks? // Link to detailed marks using the same ID
}

model Judge {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  location String?
  link     String?

  assignments JudgeAssignment[]
}

// Assigns a judge with a letter ID to a competition
model JudgeAssignment {
  id            Int    @id @default(autoincrement())
  competitionId Int
  judgeId       Int
  judgeLetter   String // A, B, C...

  competition Competition @relation(fields: [competitionId], references: [id])
  judge       Judge       @relation(fields: [judgeId], references: [id])
  judgeMarks  JudgeMark[] // Added opposite relation field for JudgeMark

  @@unique([competitionId, judgeId])
  @@unique([competitionId, judgeLetter])
}

model Couple {
  id   Int    @id @default(autoincrement())
  name String @unique // Full name string as appears in data

  results ParticipantResult[]
}

model Club {
  id   Int    @id @default(autoincrement())
  name String @unique

  results ParticipantResult[]
}

// Represents the final result of a participant in a competition
model ParticipantResult {
  id            Int     @id @default(autoincrement())
  competitionId Int
  coupleId      Int
  clubId        Int
  number        String // Start number (e.g., "60"), used for linking to marks
  position      String? // Final position (e.g., "1.", "17. - 18.")
  section       String? // Final section reached (e.g., "Döntő")
  profileLink   String?

  competition Competition @relation(fields: [competitionId], references: [id])
  couple      Couple      @relation(fields: [coupleId], references: [id])
  club        Club        @relation(fields: [clubId], references: [id])
  roundMarks  RoundMark[] // Link to detailed marks using competitionId and number

  @@unique([competitionId, number])
  @@unique([competitionId, coupleId]) // Assuming one entry per couple per competition
}

// Represents the detailed marks data from files like competition_data/competition_marks_XXXX.json
model CompetitionMarks {
  id            Int    @id // Use the external ID from the filename
  title         String
  competitionId Int    @unique // Foreign key to Competition

  competition Competition @relation(fields: [competitionId], references: [id])
  rounds      Round[]
}

model Round {
  id                 Int    @id @default(autoincrement())
  competitionMarksId Int
  title              String // e.g., "1.Forduló", "Elődöntő"
  order              Int? // Optional: Explicit ordering

  competitionMarks CompetitionMarks @relation(fields: [competitionMarksId], references: [id])
  marks            RoundMark[]

  @@unique([competitionMarksId, title])
}

// Represents the marks for a specific participant identified by their start number
// within a specific round and dance.
model RoundMark {
  id                Int    @id @default(autoincrement())
  roundId           Int
  // Link to ParticipantResult using competitionId + number
  competitionId     Int // Need this for the compound foreign key
  participantNumber String // The start number (FordulóRsz.)

  danceName        String // Parsed dance name (e.g., "Samba", "Angol keringő")
  totalScore       String? // Can be int or float string (e.g., "45", "25.0")
  placementInRound String? // Placement within the round (e.g., "1 - 7")
  advancement      String? // Advancement status (e.g., "A", "-")

  round             Round             @relation(fields: [roundId], references: [id])
  participantResult ParticipantResult @relation(fields: [competitionId, participantNumber], references: [competitionId, number])
  judgeMarks        JudgeMark[] // Relation to individual judge marks

  @@unique([roundId, participantNumber, danceName]) // Mark unique per participant per dance per round
  @@index([competitionId, participantNumber])
}

// Represents the individual mark given by a judge for a specific dance entry
model JudgeMark {
  id                Int    @id @default(autoincrement())
  roundMarkId       Int // Links to the specific dance entry (participant, dance, round)
  judgeAssignmentId Int // Links to the specific judge in this competition
  mark              String // Stores 'X', '.', or placement number ('1'-'9')

  roundMark       RoundMark       @relation(fields: [roundMarkId], references: [id])
  judgeAssignment JudgeAssignment @relation(fields: [judgeAssignmentId], references: [id])

  @@unique([roundMarkId, judgeAssignmentId])
}
